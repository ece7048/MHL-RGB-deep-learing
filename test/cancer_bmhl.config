[Solver of Optimization]
	type_analysis= CL  				#CL classification , SL segmentation
	ram = CPU  					#CPU or GPU processes.
	ngpu = 16            				#Number of GPU processors (keras at most 8).
	metrics =recall 				#Images input shape
	metrics1 =precision   				#Images input shape
	metrics2 =AUCROC  				#Images input shape
	batch_size = 64				#Batch size of train.
	batch_size_test =64 				#Batch size of test.
	epochs_main = 1		#Epochs of main analysis.
	num_cores =  4 					#Numer of cores.
	store_results =  on				# (on,off) Store in txt all the mean and SD of each image if a big data set does not regomented.
	validation = on				#If the data split with validation data
	validation_split=0.2				#The rate of validation data
	early_stop= False                               #Use the early stop analysis.
	monitor_callbacks=val_loss                         #Callbacks save metric acc, loss, val_loss, val_acc.
	mode_convert= min       			#Callbacks mode convert max, min, auto.
	crossval_cycle= 1				#Numerber of cycle of stored weights for Gan model.
					
[Path]
	store_txt=/jmain02/home/J2AD003/txk56/mxm87-txk56/SOFTWARE/classifier/ph_pipeline/Model/	#Path of store models, solvers.
	store_data_test=/jmain02/home/J2AD003/txk56/mxm87-txk56/DATA/cancer/	#Path of store models, solvers.
	datapath=/jmain02/home/J2AD003/txk56/mxm87-txk56/DATA/cancer/ 	#Root of images-labels for segmentation.

[Data]
	patient_list = cancer.json 			#dataset .json file the name of patient list"	
	#roi dataset
	counter_extention_roi = tif			#Write the extention of counter txt, vtk ,jpeg.
	data_extention_roi  =tif			#Write the extention of image txt, vtk ,jpeg.
	image_shape_roi = 512 				#images input shape
	original_image_shape_roi  = 512			#Original shape of images.
	roi_shape_roi = 512    				#Shape of the ROI image
	#main dataset
	counter_extention =tif				#Write the extention of counter txt, vtk ,jpeg.
	data_extention =tif				#Write the extention of image txt, vtk ,jpeg.
	image_shape = 512  				#images input shape
	original_image_shape =  512     		#Original shape of images.
	roi_shape = 2    				#Shape of the ROI image

[Data Augmentation]
	data_augm = True				#Data augmentation true or false.
	random_apply_in_batch=False			#apply random the Data augmentation in each batch true or false.
	data_augm_classic=True				#Data augmentation translation etc. true or false.               
	rotation_range = 15    			#Rotation range (0-180 degrees).
	width_shift_range = 0.1    			#Width shift range, as a float fraction of the width.
	height_shift_range = 0.1    			#Height shift range, as a float fraction of the height.
	zca_whitening = True 				#Apply ZCA whitening.
	featurewise_center = True 			#Set input mean to 0 over the dataset.
	samplewise_center = True 			#Set each sample mean to 0.
	featurewise_std_normalization = True 		#Divide inputs by std of the dataset.
	samplewise_std_normalization  = False 		#Divide each input by its std.
	horizontal_flip  = True 			#Randomly flip images.
	vertical_flip = True 				#Randomly flip images.
	zoom_range = 0.1   				#Amount of zoom. If a scalar z, zoom in [1-z, 1+z]. Can also pass a pair of floats as the zoom range.
	fill_mode = nearest 				#Points outside boundaries are filled according to mode: constant, nearest, reflect, or wrap.
	alpha = 600    				#Random elastic distortion: magnitude of distortion.
	sigma = 30     				#Random elastic distortion: length scale.
	normalize = True 				#Subtract mean and divide by std dev from each image.
	noise= True  					#Add salt and pepper noise to the image.
	max_loops = 2                                   #The loop of augmented data that will be created
	shuffle = True					#Shuffle images in each epoch


[Model net]
	load_weights_main=/weights_mhl_cancer_MHL_2.h5
	loss_weights= 0.5 0.5                          #When using dice or jaccard loss, how much to weight each output class.
	#main
	main_model =MHL				#Main model of analysis.
	max_norm_const=off    				#U-net parameter of constarin max norm on, off
	max_norm_value= 3		    		#U-net parameter of constarin max norm value.
	main_activation = relu 				#activation of main of unet.
	loss_main=categorical_crossentropy   			#Loss type.	
	m_optimizer =adam				#main-roi optimizer.	
	height = 512     				#height of unet.
	width = 512 	   				#width of unet.
	classes = 2    					#classes of unet.
	features = 64    				#Input size of features of unet.
	depth = 4    					#Depth of unet.	
	channels = 3   				#channels of unet RGB=3 Grey=1 unet.
	dropout = 0.0    				#Dropout of unet.
	batchnorm = False   				#Batch normalization of unet.	
	padding = valid     				#Padding of unet.
	learning_rate = 0.0001				# Depengs the optimization algorithm
	momentum = 					# Depengs the optimization algorithm
	decay = 					# Depengs the optimization algorithm
	seed = 						# Depengs the optimization algorithm

